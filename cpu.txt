# specs2 processor architecture

the specs2 processor architecture is described in this document.

# revisions

three revisions of the processor exist:

- r1: found in specs2 r1/r2.
  - 16-bit data bus
  - 24-bit addressing
  - up to 6.5MHz
- r2: found in specs2 r3.
  - 32-bit data bus
  - 24-bit addressing
  - up to 20MHz
- r3: found in specs2 r4.
  - 32-bit data bus
  - 32-bit addressing
  - up to 40MHz

## detecting processor revision

upon boot, the A register is initialized with the processor revision:

- r1: ???
- r2: ???
- r3: ???

# registers

eight 32-bit registers:

- accumulators: A, B, C, D
- index: W, X, Y, Z

indexed operations may only use the index registers.
the Y register increases when used on an indexed operation, unless DisableY is set.
the Z register increases (or decreases) when used on an indexed operation.

special registers:

- F: processor flags, from most to least significant: NDKEFIZC (8-bit)
  - Negative: set whenever the sign bit has changed in the last operation.
  - DisableY: do not auto-increment Y when read.
  - Kernel: whether the processor is in kernel mode or not.
  - Exception: whether an exception was raised.
  - FlipZ: if set, Z decreases when read (instead of increasing).
  - Interrupt: if set, interrupts are ignored.
  - Zero: set whenever the last operation yielded zero.
  - Carry: set when the value overflows after an addition/subtraction.
- SP: stack pointer (32-bit)
- ST: stack top (32-bit)
- SB: stack bottom (32-bit)
- PC: program counter (32-bit)
- CC: cycle counter (32-bit)
- EX: exception code (8-bit)
  - 0: no exception
  - 1: address read
  - 2: address write
  - 3: execute
  - 4: arithmetic (e.g. divide by zero)
  - 5: privilege violation
  - 6: illegal instruction
  - 7: stack error
  - 8: call stack overflow
  - 9: illegal halt 
  - 10: user exception
  - 11: invalid context
- IR: interrupt request code (8-bit)
- EV: exception handling vector
- IV: interrupt vector table pointer

# context

the processor has the ability to recall and store "contexts" - copies of all registers.

there are five contexts:

- K0: kernel mode context
- K1: user context 1
- K2: user context 2
- K3: user context 3
- K4: user context 4

# prefetching

the processor is able to fetch one instruction ahead of time in order to cut one cycle per instruction.

the following instructions are prefetch barriers:

- any instruction that alters PC (jumps/branches/jsr/ret)
- the flush instruction

# note about 32-bit operations

the processor has a 16-bit data bus, which means these will take an additional cycle (except register to register).

later revisions of the processor have a 32-bit dats bus instead.

# instruction set

the instructions are encoded in a way that is similar to that of the 6502's.
the first byte is the instruction code, and the rest are parameters.

for operations which involve registers, the following 8-bit parameter is used:
- bit 0-2: destination
- bit 4-6: source/index
  - bit 6 is ignored if this is an index (only W/X/Y/Z registers are usable).

for sha/shl, bit 7 indicates direction of shift and bit 3 indicates whether source actually is shift amount (from 0 to 7).

for branch instructions, a 16-bit offset is used.

instructions are categorized by groups:
- 00-3F: operations, char (8-bit)
- 40-7F: operations, short (16-bit)
- 80-BF: operations, int (32-bit)
- C0-FF: conditions/special

# operations

encoding format:
- ?: unused
- r: source register
- R: destination register
- I: index register
- i: immediate value
- a: address
- d: shift direction/amount
  - upper bit selects direction (left if set, right if clear)
  - lower bits are amount/register
- F: shift special
  - upper bit selects fixed (set) or register (clear) mode

val | instruction       | t | encoding
----|-------------------|---|------------
 80 | add R, R          | 1 | rR
 81 | add R, #$val      | 1 | ?R iiiiiiii
 82 | add R, $val       | 2 | ?R aaaaaaaa
 83 | add R, $val+R     | 3 | IR aaaaaaaa
 84 | add R, ($val)     | 4 | ?R aaaaaaaa
 85 | add R, ($val)+R   | 5 | IR aaaaaaaa
 86 | add R, ($val+R)   | 5 | IR aaaaaaaa
 87 | add R, (R)        | 2 | rR
 88 | sub R, R          | 1 | rR
 89 | sub R, #$val      | 1 | ?R iiiiiiii
 8a | sub R, $val       | 2 | ?R aaaaaaaa
 8b | sub R, $val+R     | 3 | IR aaaaaaaa
 8c | sub R, ($val)     | 4 | ?R aaaaaaaa
 8d | sub R, ($val)+R   | 5 | IR aaaaaaaa
 8e | sub R, ($val+R)   | 5 | IR aaaaaaaa
 8f | sub R, (R)        | 2 | rR
 90 | and R, R          | 1 | rR
 91 | or R, R           | 1 | rR
 92 | xor R, R          | 1 | rR
 93 | cmp R, R          | 1 | rR
 94 | and R, #$val      | 1 | ?R iiiiiiii
 95 | or R, #$val       | 1 | ?R iiiiiiii
 96 | xor R, #$val      | 1 | ?R iiiiiiii
 97 | cmp R, #$val      | 1 | ?R iiiiiiii
 98 | and R, $addr      | 2 | ?R aaaaaaaa
 99 | or R, $addr       | 2 | ?R aaaaaaaa
 9a | xor R, $addr      | 2 | ?R aaaaaaaa
 9b | cmp R, $addr      | 2 | ?R aaaaaaaa
 9c | and R, (R)        | 2 | rR
 9d | or R, (R)         | 2 | rR
 9e | xor R, (R)        | 2 | rR
 9f | cmp R, (R)        | 2 | rR
 a0 | mov R, R          | 1 | rR
 a1 | mov R, #$val      | 1 | ?R iiiiiiii
 a2 | mov R, $addr      | 2 | ?R aaaaaaaa
 a3 | mov R, $addr+R    | 3 | IR aaaaaaaa
 a4 | mov R, ($addr)    | 4 | ?R aaaaaaaa
 a5 | mov R, ($addr)+R  | 5 | IR aaaaaaaa
 a6 | mov R, ($addr+R)  | 5 | IR aaaaaaaa
 a7 | mov R, (R)        | 2 | rR
 a8 | mov $dest, #$val  | 1 |
 a9 |                   |   |
 aa | mov $addr, R      | 2 | ?R aaaaaaaa
 ab | mov $addr+R, R    | 3 | IR aaaaaaaa
 ac | mov ($addr), R    | 4 | ?R aaaaaaaa
 ad | mov ($addr)+R, R  | 5 | IR aaaaaaaa
 ae | mov ($addr+R), R  | 5 | IR aaaaaaaa
 af | mov (R), R        | 2 | rR
 b0 | sha R             | 1 | dF
 b1 | shl R             | 1 | dF
 b2 | rol R, R          | 1 | rF
 b3 | ror R, R          | 1 | rF
 b4 | swp R, R          | 1 | rR
 b5 | push R            | 2 | ?R
 b6 | pop R             | 2 | ?R
 b7 | push #$val        | 2 | iiiiiiii
 b8 | mul R, R          | 4 | rR
 b9 | mul R, #$val      | 4 | ?R iiiiiiii
 ba | mulu R, R         | 4 | rR
 bb | mulu R, #$val     | 4 | ?R iiiiiiii
 bc | div R, R          | 1*| rR
 bd | div R, #$val      | 1*| ?R iiiiiiii
 be | divq R            | 1 | ?R
 bf | divr R            | 1 | ?R

(*) only sets division state

# conditions/special

encoding format:
- ?: unused
- r: source register
- R: destination register
- o: offset (signed)
- b: bit (takes one bit from next nibble so it can cover 32 values)
- a: address
- K: context

val | instruction       | t | encoding
----|-------------------|---|------------
 c0 | beq $off          | 1 | oooo
 c1 | bne $off          | 1 | oooo
 c2 | bmi $off          | 1 | oooo
 c3 | bpl $off          | 1 | oooo
 c4 | bcs $off          | 1 | oooo
 c5 | bcc $off          | 1 | oooo
 c6 | loopc $off        | 1 | oooo
 c7 | loops $off        | 1 | oooo
 c8 | bbs R.#b, $off    | 1 | bR oooo
 c9 | bbc R.#b, $off    | 1 | bR oooo
 ca | bbs R.R, $off     | 1 | rR oooo
 cb | bbc R.R, $off     | 1 | rR oooo
 cc | mov R, EX         | 1 | ?R
 cd | mov R, IR         | 1 | ?R
 ce | loop $off         | 1 | oooo
 cf | bra $off          | 1 | oooo
 d0 | jmp $addr         | 1 | aaaaaaaa
 d1 | jmp ($addr)       | 2 | aaaaaaaa
 d2 | jsr $addr         | 2 | aaaaaaaa
 d3 | jsr ($addr)       | 4 | aaaaaaaa
 d4 | extc R            | 1 | ?R
 d5 | exts R            | 1 | ?R
 d6 | mov EV, R         | 1 | ?R
 d7 | mov IV, R         | 1 | ?R
 d8 | mov R, ST         | 1 | ?R
 d9 | mov ST, R         | 1 | ?R
 da | mov R, SB         | 1 | ?R
 db | mov SB, R         | 1 | ?R
 dc | flush             | 1 |
 dd | brk               | 1 |
 de | hlt               | 1 |
 df | ret               | 2 |
 e0 | set n             | 1 |
 e1 | set d             | 1 |
 e2 | set k             | 1 |
 e3 | set e             | 1 |
 e4 | set f             | 1 |
 e5 | set i             | 1 |
 e6 | set z             | 1 |
 e7 | set c             | 1 |
 e8 | clr n             | 1 |
 e9 | clr d             | 1 |
 ea | clr k             | 1 |
 eb | clr e             | 1 |
 ec | clr f             | 1 |
 ed | clr i             | 1 |
 ee | clr z             | 1 |
 ef | clr c             | 1 |
 f0 | pushds            | 8 |
 f1 | pushall           |24 |
 f2 | popds             | 8 |
 f3 | popall            |24 |
 f4 | mov R, SP         | 1 | ?R
 f5 | mov SP, R         | 1 | ?R
 f6 | movc R, F         | 1 | ?R
 f7 | mov R, PC         | 1 | ?R
 f8 | lcc R             | 1 | ?R
 f9 | scc R             | 1 | ?R
 fa | rcc               | 1 |
 fb | mov R, K          | 1 | rK
 fc | nop               | 1 |
 fd | mov K, R          | 1 | ?K
 fe | store K           | 3 | ?K
 ff | rec K             | 3 | ?K
